; ====================================================================
; Project:   DiskBuddy64 - Fast IEC Implementation for 1541 - Reading
; Version:   v1.0
; Year:      2022
; Author:    Stefan Wagner
; Github:    https://github.com/wagiminator
; EasyEDA:   https://easyeda.com/wagiminator
; License:   http://creativecommons.org/licenses/by-sa/3.0/
; ====================================================================
;
; Description:
; ------------
; Simple fast loading by accelerating the IEC communication due to
; the use of an asynchronous 2-bit parallel protocol. This program is
; loaded into the memory of the floppy disk drive and communicates
; from there with the TapeBuddy64 adapter.
; This implementation reads a list of sectors on the specified track.
;
; References:
; -----------
; Michael Steil: https://www.pagetable.com/?p=568
;
; Assembling Instructions:
; ------------------------
; ca65 -l -t c64 fastread.a65
; ld65 -t c64 -o fastread.bin fastread.o
;
; Operating Instructions:
; -----------------------
; "M-E"<addrLow><addrHigh><track><#sectors><sector1><sector2>...
;
; $0200 - $0202 "M-E"       Memory Execute command
; $0203 - $0204 <addrL/H>   start address of this program in RAM
; $0205         <track>     track on disk to read from
; $0206         <#sectors>  number of sectors in the following list
; $0207 - ...   <sectorX>   list of sectors to read in order

.setcpu "6502"
.org $0500

start:
    lda #$00          ; set buffer number:
    sta $f9           ; -> buffer at $0300
    sta $05           ; set sector index start value ($00)
    lda $0205         ; get track from command buffer
    sta $06           ; set track for disk operation
    lda $1c00         ; turn on DRIVE LED
    ora #$08
    sta $1c00

readloop:
    ldx $05           ; get sector index
    lda $0207,x       ; get sector from list in command buffer
    sta $07           ; set sector for disk operation    
    ldx #$05          ; number of retries
retry:
    lda #$80          ; job number for reading sector
    sta $00           ; set job -> start disk operation
waitcomplete:
    lda $00
    bmi waitcomplete  ; wait for job to complete
    cmp #$01          ; was it successful?
    beq success       ; -> leave retry loop
    lda $16           ; disk ID1 -> compensate ID MISMATCH
    sta $12           ; disk drive ID1
    lda $17           ; disk ID2
    sta $13           ; disk drive ID1
    dex               ; decrease retry counter
    bne retry         ; try again (max 5x)
    beq end           ; jump to end

success:    
    sei               ; disable interrupts
    ldx #$00          ; buffer index
sendloop:
    lda $0300,x       ; 4 read byte from buffer
    ldy #$08          ; 2 mark start of byte:
    sty $1800         ; 4 -> pull CLK LOW
    tay               ; 2 save original in y
    lsr               ; 2 get high nibble
    lsr               ; 2
    lsr               ; 2
    lsr               ; 2
    sta $1800         ; 4 transfer bit 7 and 5
    asl               ; 2
    and #$0F          ; 2
    sta $1800         ; 4 transfer bit 6 and 4
    tya               ; 2 get original byte
    and #$0F          ; 2 get low nibble
    sta $1800         ; 4 transfer bit 3 and 1
    asl               ; 2
    and #$0F          ; 2
    sta $1800         ; 4 transfer bit 2 and 0
    ldy #$00          ; 2 mark end of byte:
    sty $1800         ; 4 -> release CLK HIGH
    inx               ; 2
    bne sendloop      ; 3 repeat for all 256 bytes

    cli               ; enable interrupts
    inc $05           ; increment sector index
    dec $0206         ; decrement number of sectors
    bne readloop      ; repeat for all sectors

end:
    lda $1c00         ; turn off DRIVE LED
    and #$F7
    sta $1c00
    rts               ; end of mission
